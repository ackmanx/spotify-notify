#!/usr/bin/env node

const path = require('path')
const debug = require('debug')(`sn:${path.basename(__filename)}`)
const http = require('http')

const app = require('../server/app')
const db = require('../server/db/mongo')

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3666')
app.set('port', port)

/**
 * Create HTTP server.
 */
const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */
db.initDatabase(() => {
    server.listen(port)
    server.on('error', onError)
    server.on('listening', onListening)
})

/**
 * Handle process termination gracefully
 */
const shutdown = reason => () => {
    debug(`${reason} signal received. Shutting Express server down...`)
    server.close()
}

process
    .on('SIGTERM', shutdown('SIGTERM'))
    .on('SIGINT', shutdown('SIGINT'))

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10)

    if (isNaN(port)) {
        // named pipe
        return val
    }

    if (port >= 0) {
        // port number
        return port
    }

    return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    const addr = server.address()
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port
    debug('Listening on ' + bind)
}
